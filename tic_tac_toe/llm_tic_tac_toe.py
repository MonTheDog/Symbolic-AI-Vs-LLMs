# File per implementare l'agente che utilizza llm per il tris

"""
External dependencies:
"""
import json
import sys
import os
import importlib
import re
from pydantic import BaseModel
import utils


"""
Prompt templates and utility functions:
"""
TICTACTOE_PROMPT_BASE_4O = """
Current move number: ###
{}
###

Board: ###
{}
###

Desired format: ###
Reasoning: ....

Cell Number: 

###
"""


TICTACTOE_PROMPT_BASE_O1 = """
You are playing tic-tac-toe. Your goal is to win the game. Your symbol is X. We are currently on move number {}. Below, you’ll see a representation of the current board. You need to specify the number of the cell where you want to place your symbol. The cells are numbered from top to bottom, left to right: the first row has 1, 2, 3; the second row has 4, 5, 6; and the third row has 7, 8, 9. In your response, include only the number corresponding to the cell where you want to place your symbol (without any additional information).

Board: ###
{}
###
"""


MAPPING_MODEL_NAME_TO_BASE_PROMPT = {
    "4o": TICTACTOE_PROMPT_BASE_4O,
    "o1": TICTACTOE_PROMPT_BASE_O1
}



"""
Adapter functions (currently valid for 4o and o1)
"""
def tictactoe_to_llm_adapter(prompt, move_number, current_board):
    """
    Input: 
    - move_number: integer
    - current_board: visual representation of the board as generated by symbolic_tic_tac_toe.py
    ###
    {board}
    ###
    Output: prompt formatted with the input values
    """
    return prompt.format(move_number, current_board)



"""
Conversation builders
"""
TICTACTOE_4O_CONVERSATION = [
    {"role": "system", "content": "You are playing tic-tac-toe. Your goal is to win the game. Your symbol is X. Below, you’ll see the current move number and a representation of the current board. You need to specify the number of the cell where you want to place your symbol. The cells are numbered from top to bottom, left to right: the first row has 1, 2, 3; the second row has 4, 5, 6; and the third row has 7, 8, 9. In your response, include a string with the reasoning you used to find the solution and the number corresponding to the cell where you want to place your symbol, like in the format below."},
]  #  conversation will be updated at each move

TICTACTOE_O1_CONVERSATION = [
]

MAPPING_MODEL_NAME_TO_CONVERSATION = {
    "4o": TICTACTOE_4O_CONVERSATION,
    "o1": TICTACTOE_O1_CONVERSATION
}



"""
Response schemas (currently valid for 4o)
"""
class TicTacToeOutputSchema(BaseModel):
    reasoning: str
    cell_number: int



"""
Response internal checkers (provide output and eventually a feedback message)
"""
def tictactoe_4o_internal_checking_schema(response):
    """
    Internal schema: number between 1 and 9
    """
    if response.cell_number < 1 or response.cell_number > 9:
        return False, "The number found in the response is not between 1 and 9. Please provide a number between 1 and 9."
    return True, ""


def tictactoe_o1_internal_checking_schema(response):
    """
    Pre-processing step: remove everything which is not a number
    Internal schema: number (after pre-processing) between 1 and 9
    """
    match = re.search(r'-?\d+', response)  #  pre-processing step
    if not match:
        return False, "No number found in the response. Please provide a number in the response."
    response = match.group(0)
    
    try:
        response = int(response)
        if response < 1 or response > 9:
            return False, "The number found in the response is not between 1 and 9. Please provide a number between 1 and 9."
    except:
        return False, "The output cannot be cast to integer."
         
    return response, ""


MAPPING_MODEL_NAME_TO_INTERNAL_CHECKING_SCHEMA = {
    "4o": tictactoe_4o_internal_checking_schema,
    "o1": tictactoe_o1_internal_checking_schema
}


"""
LLM Agent
"""
class TicTacToeLLMAgent:
    def __init__(self, model_name):
        self.model_name = model_name
        self.client = utils.get_openai_client()
        self.base_prompt = MAPPING_MODEL_NAME_TO_BASE_PROMPT[model_name]
        self.conversation = MAPPING_MODEL_NAME_TO_CONVERSATION[model_name]
        self.output_schema = TicTacToeOutputSchema if model_name == "4o" else None
        self.internal_checking_schema = MAPPING_MODEL_NAME_TO_INTERNAL_CHECKING_SCHEMA[model_name]

    def reset_conversation(self):
        """
        Resets the conversation state for a model.
        :param model: The model in use
        """
        global TICTACTOE_4O_CONVERSATION
        global TICTACTOE_O1_CONVERSATION

        if self.model_name == "4o":
            TICTACTOE_4O_CONVERSATION = [{"role": "system",
                 "content": "You are playing tic-tac-toe. Your goal is to win the game. Your symbol is X. Below, you’ll see the current move number and a representation of the current board. You need to specify the number of the cell where you want to place your symbol. The cells are numbered from top to bottom, left to right: the first row has 1, 2, 3; the second row has 4, 5, 6; and the third row has 7, 8, 9. In your response, include a string with the reasoning you used to find the solution and the number corresponding to the cell where you want to place your symbol, like in the format below."},]
            self.conversation = TICTACTOE_4O_CONVERSATION
        elif self.model_name == "o1":
            TICTACTOE_O1_CONVERSATION = [ ]
            self.conversation = TICTACTOE_O1_CONVERSATION

    def update_conversation(self, role, content):
        self.conversation.append({"role": role, "content": str(content)})


    def action(self):
        """
        Response generation, internal checking.
        Output: response from the LLM (integer, False with feedback message if the response is not valid)
        """
        if self.model_name == "4o":
            response = utils.interrogate_4o(self.client, "mini", self.conversation, self.output_schema)
        elif self.model_name == "o1":
            response = utils.interrogate_o1(self.client, "mini", self.conversation)
        self.update_conversation("assistant", response)
        is_valid, feedback_message = self.internal_checking_schema(response)
        return is_valid, feedback_message, response


    def action_loop(self, move_number, current_board, max_moves=3):
        """
        Repeats until the response adheres to the internal schema or the maximum number of moves is reached
        Input: move_number, current_board
        Output: selected cell number and reasoning. If the model failed move number will be 0
        """
        prompt = tictactoe_to_llm_adapter(self.base_prompt, move_number, current_board)
        self.update_conversation("user", prompt)
        i = 0
        while i < max_moves:
            is_valid, feedback_message, response = self.action()
            if is_valid:
                if self.model_name == "4o":
                    return response.cell_number, response.reasoning
                elif self.model_name == "o1":
                    return is_valid, "Reasoning not available"
            else:
                i+=1
                self.update_conversation("user", feedback_message)
        return 0, ""
        









